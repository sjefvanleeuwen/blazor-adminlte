@namespace Blazor.AdminLte
@inject NavigationManager nav;
@implements IDisposable
@inherits BlazorState.BlazorStateComponent
@inject IJSRuntime JS;
<li class="nav-item">
    <a href="@Link" class="nav-link @(State.GetState(Id).GetDescription<StyleAttribute>())" @onclick="Click" @onclick:preventDefault>
        <i class="nav-icon @Icon"></i>
        <p>
            @ChildContent
        </p>
    </a>
</li>
@code {

    [Parameter]
    public string Icon { get; set; }
    [Parameter]
    public string Link { get; set; } = "javascript:void(0)";
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private SideBarState State => GetState<SideBarState>();

    private void Click()
    {
        nav.NavigateTo(Link);
        JS.InvokeVoidAsync("toggleAside");
    }

    protected override void OnInitialized()
    {
        // Subscribe to the event
        nav.LocationChanged += LocationChanged;
        
        // Manually invoke location change to set state when user access URL directly
        // and to preserve highlight state when use refresh the page
        LocationChanged(this, null);
        
        base.OnInitialized();
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (new Uri(nav.Uri).PathAndQuery.Trim('/') != Link.Trim('/'))
            return;
        
        Mediator.Send(new SideBarState.SelectMenuItemAction { Id = Id }); ;
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        nav.LocationChanged -= LocationChanged;
    }
}