@namespace Blazor.AdminLte
@inject IJSRuntime JS  
<li class="nav-item has-treeview menu-@(menuState)">
    <a @ref="menu" href="javascript:void(0);" class='nav-link' @onclick="OnClick">
        <i class="nav-icon @Icon"></i>
        <p>
            @Title
            @if (!string.IsNullOrWhiteSpace(Chevron))
            {
                <i class="right rot-right fas @Chevron"></i>
            }
        </p>
    </a>
    <ul @ref="ul" class="nav nav-treeview">
        @Items
    </ul>
</li>
@code {
    [Parameter]
    public string Icon { get; set; }
    [Parameter]
    public string Chevron { get; set; } = "fa-angle-left";
    [Parameter]
    public RenderFragment Title { get; set; }
    [Parameter]
    public RenderFragment Items { get; set; }

    [Parameter]
    public bool IsActive
    {
        get => _isActive;
        set
        {
            if (value)
                SetActive();
            else
                SetInactive();
        }
    }

    private bool _isActive;
    private MenuState _menuState { get; set; }

    private MenuState MenuState {
        get => _menuState;
        set {
            if (_menuState == value)
                return;
            
            JS.InvokeVoidAsync("toggleSideMenu", ul);
            _menuState = value;
        }
    }

    public void SetActive()
    {
        if (_isActive)
            return;
        
        _isActive = true;
        MenuState = MenuState.Open;
    }

    public void SetInactive()
    {
        if (!_isActive)
            return;
        
        _isActive = false;
        MenuState = MenuState.Closed;
    }
    
    private string menuState => MenuState.GetDescription<StyleAttribute>();

    private ElementReference ul { get; set; }
    private ElementReference menu { get; set; }

    private void OnClick()
    {
        MenuState = MenuState == MenuState.Open ? MenuState.Closed : MenuState.Open;
    }
}
